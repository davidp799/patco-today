<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/build.gradle.kts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/build.gradle.kts" />
              <option name="originalContent" value="import java.util.Properties&#10;&#10;plugins {&#10;    alias(libs.plugins.android.application)&#10;    alias(libs.plugins.kotlin.android)&#10;    alias(libs.plugins.compose.compiler)&#10;}&#10;&#10;// Load local.properties&#10;val localProperties = Properties()&#10;val localPropertiesFile = rootProject.file(&quot;local.properties&quot;)&#10;if (localPropertiesFile.exists()) {&#10;    localProperties.load(localPropertiesFile.inputStream())&#10;}&#10;&#10;android {&#10;    namespace = &quot;com.davidp799.patcotoday&quot;&#10;    compileSdk = 36&#10;&#10;    defaultConfig {&#10;        applicationId = &quot;com.davidp799.patcotoday&quot;&#10;        minSdk = 26&#10;        targetSdk = 36&#10;        versionCode = 21&#10;        versionName = &quot;2.0&quot;&#10;&#10;        testInstrumentationRunner = &quot;androidx.test.runner.AndroidJUnitRunner&quot;&#10;        vectorDrawables {&#10;            useSupportLibrary = true&#10;        }&#10;&#10;        // For development, read from local.properties if available&#10;        val apiKey = localProperties.getProperty(&quot;API_KEY&quot;) ?: &quot;ZMz6Y9oU9I9nfPK2PHuR09zN4lYrFdG49it2znq2&quot;&#10;        buildConfigField(&quot;String&quot;, &quot;API_KEY&quot;, &quot;\&quot;$apiKey\&quot;&quot;)&#10;    }&#10;&#10;    // Disable baseline profiles to avoid installation conflicts&#10;    androidComponents {&#10;        beforeVariants { variantBuilder -&gt;&#10;            variantBuilder.enableAndroidTest = false&#10;        }&#10;    }&#10;&#10;    buildTypes {&#10;        debug {&#10;            // Use local.properties for development&#10;            val devApiKey = localProperties.getProperty(&quot;API_KEY&quot;) ?: &quot;ZMz6Y9oU9I9nfPK2PHuR09zN4lYrFdG49it2znq2&quot;&#10;            buildConfigField(&quot;String&quot;, &quot;API_KEY&quot;, &quot;\&quot;$devApiKey\&quot;&quot;)&#10;        }&#10;        release {&#10;            // Use the production API key for release builds&#10;            buildConfigField(&quot;String&quot;, &quot;API_KEY&quot;, &quot;\&quot;ZMz6Y9oU9I9nfPK2PHuR09zN4lYrFdG49it2znq2\&quot;&quot;)&#10;            isMinifyEnabled = true&#10;            proguardFiles(&#10;                getDefaultProguardFile(&quot;proguard-android-optimize.txt&quot;),&#10;                &quot;proguard-rules.pro&quot;&#10;            )&#10;            signingConfig = signingConfigs.getByName(&quot;debug&quot;)&#10;        }&#10;    }&#10;    compileOptions {&#10;        sourceCompatibility = JavaVersion.VERSION_1_8&#10;        targetCompatibility = JavaVersion.VERSION_1_8&#10;    }&#10;    kotlinOptions {&#10;        jvmTarget = &quot;1.8&quot;&#10;    }&#10;    buildFeatures {&#10;        compose = true&#10;        buildConfig = true&#10;    }&#10;    packaging {&#10;        resources {&#10;            excludes += &quot;/META-INF/{AL2.0,LGPL2.1}&quot;&#10;        }&#10;    }&#10;}&#10;&#10;dependencies {&#10;&#10;    implementation(libs.androidx.core.ktx)&#10;    implementation(libs.androidx.lifecycle.runtime.ktx)&#10;    implementation(libs.androidx.activity.compose)&#10;    implementation(platform(libs.androidx.compose.bom))&#10;    implementation(libs.androidx.ui)&#10;    implementation(libs.androidx.ui.graphics)&#10;    implementation(libs.androidx.ui.tooling.preview)&#10;    implementation(libs.androidx.material3)&#10;    implementation(libs.androidx.navigation.compose)&#10;    implementation(libs.androidx.material.icons.extended.android)&#10;&#10;    // Add Material Compose animations for transitions&#10;    implementation(libs.androidx.animation)&#10;    implementation(libs.androidx.material)&#10;&#10;    // Add networking and API dependencies&#10;    implementation(libs.retrofit)&#10;    implementation(libs.converter.gson)&#10;    implementation(libs.okhttp)&#10;    implementation(libs.logging.interceptor)&#10;    implementation(libs.androidx.lifecycle.viewmodel.compose)&#10;    implementation(libs.androidx.preference.ktx)&#10;    implementation(libs.material)&#10;    implementation(libs.androidx.core.splashscreen)&#10;&#10;    // Google Play Store review dependency&#10;    implementation(libs.play.review)&#10;&#10;    testImplementation(libs.junit)&#10;    androidTestImplementation(libs.androidx.junit)&#10;    androidTestImplementation(libs.androidx.espresso.core)&#10;    androidTestImplementation(platform(libs.androidx.compose.bom))&#10;    androidTestImplementation(libs.androidx.ui.test.junit4)&#10;    debugImplementation(libs.ui.tooling)&#10;    debugImplementation(libs.androidx.ui.tooling)&#10;    debugImplementation(libs.androidx.ui.test.manifest)&#10;}" />
              <option name="updatedContent" value="import java.util.Properties&#13;&#10;&#13;&#10;plugins {&#13;&#10;    alias(libs.plugins.android.application)&#13;&#10;    alias(libs.plugins.kotlin.android)&#13;&#10;    alias(libs.plugins.compose.compiler)&#13;&#10;}&#13;&#10;&#13;&#10;// Load local.properties&#13;&#10;val localProperties = Properties()&#13;&#10;val localPropertiesFile = rootProject.file(&quot;local.properties&quot;)&#13;&#10;if (localPropertiesFile.exists()) {&#13;&#10;    localProperties.load(localPropertiesFile.inputStream())&#13;&#10;}&#13;&#10;&#13;&#10;android {&#13;&#10;    namespace = &quot;com.davidp799.patcotoday&quot;&#13;&#10;    compileSdk = 36&#13;&#10;&#13;&#10;    defaultConfig {&#13;&#10;        applicationId = &quot;com.davidp799.patcotoday&quot;&#13;&#10;        minSdk = 26&#13;&#10;        targetSdk = 36&#13;&#10;        versionCode = 21&#13;&#10;        versionName = &quot;2.0&quot;&#13;&#10;&#13;&#10;        testInstrumentationRunner = &quot;androidx.test.runner.AndroidJUnitRunner&quot;&#13;&#10;        vectorDrawables {&#13;&#10;            useSupportLibrary = true&#13;&#10;        }&#13;&#10;&#13;&#10;        // For development, read from local.properties if available&#13;&#10;        val apiKey = localProperties.getProperty(&quot;API_KEY&quot;) ?: &quot;ZMz6Y9oU9I9nfPK2PHuR09zN4lYrFdG49it2znq2&quot;&#13;&#10;        buildConfigField(&quot;String&quot;, &quot;API_KEY&quot;, &quot;\&quot;$apiKey\&quot;&quot;)&#13;&#10;    }&#13;&#10;&#13;&#10;    // Disable baseline profiles to avoid installation conflicts&#13;&#10;    androidComponents {&#13;&#10;        beforeVariants { variantBuilder -&gt;&#13;&#10;            variantBuilder.enableAndroidTest = false&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    buildTypes {&#13;&#10;        debug {&#13;&#10;            // Use local.properties for development&#13;&#10;            val devApiKey = localProperties.getProperty(&quot;API_KEY&quot;) ?: &quot;ZMz6Y9oU9I9nfPK2PHuR09zN4lYrFdG49it2znq2&quot;&#13;&#10;            buildConfigField(&quot;String&quot;, &quot;API_KEY&quot;, &quot;\&quot;$devApiKey\&quot;&quot;)&#13;&#10;        }&#13;&#10;        release {&#13;&#10;            // Use the production API key for release builds&#13;&#10;            buildConfigField(&quot;String&quot;, &quot;API_KEY&quot;, &quot;\&quot;ZMz6Y9oU9I9nfPK2PHuR09zN4lYrFdG49it2znq2\&quot;&quot;)&#13;&#10;            isMinifyEnabled = true&#13;&#10;            proguardFiles(&#13;&#10;                getDefaultProguardFile(&quot;proguard-android-optimize.txt&quot;),&#13;&#10;                &quot;proguard-rules.pro&quot;&#13;&#10;            )&#13;&#10;            signingConfig = signingConfigs.getByName(&quot;debug&quot;)&#13;&#10;        }&#13;&#10;    }&#13;&#10;    compileOptions {&#13;&#10;        sourceCompatibility = JavaVersion.VERSION_1_8&#13;&#10;        targetCompatibility = JavaVersion.VERSION_1_8&#13;&#10;    }&#13;&#10;    kotlinOptions {&#13;&#10;        jvmTarget = &quot;1.8&quot;&#13;&#10;    }&#13;&#10;    buildFeatures {&#13;&#10;        compose = true&#13;&#10;        buildConfig = true&#13;&#10;    }&#13;&#10;    packaging {&#13;&#10;        resources {&#13;&#10;            excludes += &quot;/META-INF/{AL2.0,LGPL2.1}&quot;&#13;&#10;            // Exclude baseline profile files&#13;&#10;            excludes += &quot;**/baseline.prof&quot;&#13;&#10;            excludes += &quot;**/baseline.profm&quot;&#13;&#10;        }&#13;&#10;    }&#13;&#10;}&#13;&#10;&#13;&#10;dependencies {&#13;&#10;&#13;&#10;    implementation(libs.androidx.core.ktx)&#13;&#10;    implementation(libs.androidx.lifecycle.runtime.ktx)&#13;&#10;    implementation(libs.androidx.activity.compose)&#13;&#10;    implementation(platform(libs.androidx.compose.bom))&#13;&#10;    implementation(libs.androidx.ui)&#13;&#10;    implementation(libs.androidx.ui.graphics)&#13;&#10;    implementation(libs.androidx.ui.tooling.preview)&#13;&#10;    implementation(libs.androidx.material3)&#13;&#10;    implementation(libs.androidx.navigation.compose)&#13;&#10;    implementation(libs.androidx.material.icons.extended.android)&#13;&#10;&#13;&#10;    // Add Material Compose animations for transitions&#13;&#10;    implementation(libs.androidx.animation)&#13;&#10;    implementation(libs.androidx.material)&#13;&#10;&#13;&#10;    // Add networking and API dependencies&#13;&#10;    implementation(libs.retrofit)&#13;&#10;    implementation(libs.converter.gson)&#13;&#10;    implementation(libs.okhttp)&#13;&#10;    implementation(libs.logging.interceptor)&#13;&#10;    implementation(libs.androidx.lifecycle.viewmodel.compose)&#13;&#10;    implementation(libs.androidx.preference.ktx)&#13;&#10;    implementation(libs.material)&#13;&#10;    implementation(libs.androidx.core.splashscreen)&#13;&#10;&#13;&#10;    // Google Play Store review dependency&#13;&#10;    implementation(libs.play.review)&#13;&#10;&#13;&#10;    testImplementation(libs.junit)&#13;&#10;    androidTestImplementation(libs.androidx.junit)&#13;&#10;    androidTestImplementation(libs.androidx.espresso.core)&#13;&#10;    androidTestImplementation(platform(libs.androidx.compose.bom))&#13;&#10;    androidTestImplementation(libs.androidx.ui.test.junit4)&#13;&#10;    debugImplementation(libs.ui.tooling)&#13;&#10;    debugImplementation(libs.androidx.ui.tooling)&#13;&#10;    debugImplementation(libs.androidx.ui.test.manifest)&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>